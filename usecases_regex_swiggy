#######################################################################################################
import re
#1.extract order IDs from log string
logs="""
[INFO]Order ID:SWY123456 placed at 6:45PM
[INFO]Order ID:SWY987654 placed at 7:10PM
"""
order_ids=re.findall(r"SWY\d{6}",logs)
print("Extracted Order IDs:",order_ids)
'''output:Extracted Order IDs: ['SWY123456', 'SWY987654']'''

#2.validate email and phone no.
customer_data=[{"email":"shraddhac695@gmail.com","phone":"8999156064"},
               {"email":"fake-email@.com","phone":"12345"},]
email_pattern=r"^[\w\.-]+@[\w\.-]+\.\w+$"
phone_pattern=r"^[6-9]\d{9}$"
'''
^[\w\.-]+ → Start with letters, digits, _, ., or -
@ → Must have @
[\w\.-]+ → Domain name (like gmail, yahoo)
\. → Dot before extension
\w+ → Extension like com, in, etc.
$ → End of string
✅email pattern:
    r"^[\w\.-]+@[\w\.-]+\.\w+$"
✅ Valid: abc@gmail.com
❌ Invalid: abc@.com, @gmail.com

✅ Phone Pattern:
r"^\d{10}$"  or r"^[6-9]\d{9}$"  #[6-9]=first digit must be 6,7,8,9
Must be exactly 10 digits       #\d{9}=followed by exactly 9 digits
✅ Valid: 9876543210
❌ Invalid: 12345, abcd123456


'''
for customer in customer_data:
    valid_email=re.match(email_pattern,customer["email"])
    valid_phone=re.match(phone_pattern,customer["phone"])
    print(f"Validating{customer['email']}|Email:{bool(valid_email)}|Phone{bool(valid_phone)}")




#############################################################################

#3.Parse menu items and prices
menu="""
1.Paneer Butter Masala-250
2.Chicken Biryani-300
3.Veg Thali-180
"""
items=re.findall(r"(\d+\.\s[\w\s]+)-\s(\d+)",menu)
items

'''
Part 1: (\d+\.\s[\w\s]+)
\d+ → one or more digits (like 1, 2, 3)
\. → a dot . after the number
\s → a space
[\w\s]+ → the item name (letters and spaces)

✅ Matches things like:
1. Paneer Butter Masala, 2. Chicken Biryani, 3.Veg Thali

Part 2: -\s(\d+)
- → dash
\s → space
\d+ → one or more digits (the price like 250, 300)


'''
##########################################################################################
#4.Identify Discount Codes in notification messages
notifications="""
Use code SWIGGY50 to get 50% off.
Hurry! Apply code FIRST100 for 100 off.
"""

discount_codes=re.findall(r"\b[A-Z]+\d*\b",notifications)

'''
🔍 Pattern: \b[A-Z]+\d*\b
What it means:
\b → word boundary (to match whole words)
[A-Z]+ → one or more capital letters (like SWIGGY, FIRST)
\d* → zero or more digits (like 50, 100 — optional)
\b → end of word boundary

✅ It matches:
Words that are all capital letters,
 and may have numbers at the end
'''
#############################################################################


